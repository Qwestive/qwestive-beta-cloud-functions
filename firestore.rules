rules_version ='2'
service cloud.firestore {
  match /databases/{database}/documents {
    match /users/{userId} {
      allow write: if false;

      allow delete: if request.auth != null 
                    && request.auth.uid == userId;

      allow update: if request.auth != null 
                    && request.auth.uid == userId
                    && request.resource.data.diff(resource.data).affectedKeys().hasOnly(
                      ['displayName', 'bio', 'personalLink','profileImage','coverImage'])
                    && request.resource.data.displayName.size() < 50
                    && request.resource.data.bio.size() < 160;
                            
      allow read: if true;
    }
    match /posts/{postId} {
      function meetsTokenRequirements() {
      	let postData = get(/databases/$(database)/documents/posts/$(postId));
        let userData = get(/databases/$(database)/documents/users/$(request.auth.uid));
        return postData.data.accessMinimumTokenBalance <= userData.data.tokenBalances[postData.data.accessTokenId];
      }

      allow write: if false;

      allow delete: if false;

      allow update: if false;
                            
      allow read: if request.auth != null && meetsTokenRequirements();
    }
    match /comments/{commentId} {
      allow write: if false;

      allow delete: if false;

      allow update: if false;
                            
      allow read: if request.auth != null;
    }
    match /categories/{categorie} {
      allow write: if false;

      allow delete: if false;

      allow update: if false;
                            
      allow read: if request.auth != null;
    }
  }
}